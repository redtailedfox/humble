// Code generated by hertz generator.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	//api "hello/biz/model/api"
)

// Encrypt .
// @router /encrypt [POST]
func Encrypt(ctx context.Context, c *app.RequestContext) {
	var requestURL string = "http://example.com/life/client/11?vint64=1&items=item0,item1,item2"
	var IDLPATH string = "idl/encrypt.thrift"
	var jsonData map[string]interface{}

	//return data in bytes
	response := c.GetRawData()

	err := json.Unmarshal(response, &jsonData)

	if err != nil {
		fmt.Println("Error", err)
		c.String(consts.StatusBadRequest, "bad post request")
		return
	}

	fmt.Println(jsonData)

	responseFromRPC, err := makeThriftCall(IDLPATH, "encrypt", jsonData, requestURL, ctx)

	if err != nil {
		fmt.Println(err)
		c.String(consts.StatusBadRequest, "error in thrift call ")
		return
	}

	fmt.Println("Post request successful")

	c.JSON(consts.StatusOK, responseFromRPC)
}
